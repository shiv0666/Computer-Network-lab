// tcp client     #include <stdio.h>       // Standard I/O (printf, perror, etc.)
#include <stdlib.h>      // For exit(), memory, conversions
#include <string.h>      // For memset(), strlen(), strcmp(), etc.
#include <unistd.h>      // For close()
#include <arpa/inet.h>   // For socket functions (socket, connect, inet_pton)

#define PORT 10035       // Port number of server
#define BUF_SIZE 1024    // Buffer size for file transfer

int main(int argc, char *argv[]) {
    int sock;                         // Socket file descriptor
    struct sockaddr_in serv_addr;     // Stores server address info
    char buffer[BUF_SIZE];            // Buffer to hold file data

    if (argc != 2) {   // Check if user provided filename
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    char *filename = argv[1];  // Store filename from command-line argument

    // 1. Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // 2. Set server address
    serv_addr.sin_family = AF_INET;            // IPv4
    serv_addr.sin_port = htons(PORT);          // Convert port to network byte order

    // 127.0.0.1 â†’ Localhost
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        return 1;
    }

    // 3. Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection Failed");
        return 1;
    }

    // 4. Send filename first
    if (send(sock, filename, strlen(filename), 0) < 0) {
        perror("Send filename failed");
        return 1;
    }

    // 5. Open file
    FILE *fp = fopen(filename, "rb");
    if (fp == NULL) {
        perror("File open failed");
        close(sock);
        return 1;
    }

    // 6. Send file contents
    size_t n;
    while ((n = fread(buffer, sizeof(char), BUF_SIZE, fp)) > 0) {
        if (send(sock, buffer, n, 0) < 0) {
            perror("Send file data failed");
            fclose(fp);
            close(sock);
            return 1;
        }
    }

    printf("File sent successfully!\n");

    // 7. Cleanup
    fclose(fp);
    close(sock);
    return 0;
}
